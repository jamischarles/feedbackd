# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

ENV["RAILS_ENV"] ||= "test"
require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')

require 'cucumber/formatter/unicode' # Remove this line if you don't want Cucumber Unicode support
require 'cucumber/rails/world'
require 'cucumber/rails/active_record'
require 'cucumber/web/tableish'

require 'capybara/rails'
require 'capybara/cucumber'
require 'capybara/session'
# this causes a bug with click_link() which can only be resolved by using @javascript, in situations where it doesn't require JS
#require 'cucumber/rails/capybara_javascript_emulation' # Lets you click links with onclick javascript handlers without using @culerity or @javascript


# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
# order to ease the transition to Capybara we set the default here. If you'd
# prefer to use XPath just remove this line and adjust any selectors in your
# steps to use the XPath syntax.
Capybara.default_selector = :css





# If you set this to false, any error raised from within your app will bubble 
# up to your step definition and out to cucumber unless you catch it somewhere
# on the way. You can make Rails rescue errors and render error pages on a
# per-scenario basis by tagging a scenario or feature with the @allow-rescue tag.
#
# If you set this to true, Rails will rescue all errors and render error
# pages, more or less in the same way your application would behave in the
# default production environment. It's not recommended to do this for all
# of your scenarios, as this makes it hard to discover errors in your application.
ActionController::Base.allow_rescue = false

# If you set this to true, each scenario will run in a database transaction.
# You can still turn off transactions on a per-scenario basis, simply tagging 
# a feature or scenario with the @no-txn tag. If you are using Capybara,
# tagging with @culerity or @javascript will also turn transactions off.
#
# If you set this to false, transactions will be off for all scenarios,
# regardless of whether you use @no-txn or not.
#
# Beware that turning transactions off will leave data in your database 
# after each scenario, which can lead to hard-to-debug failures in 
# subsequent scenarios. If you do this, we recommend you create a Before
# block that will explicitly put your database in a known state.
Cucumber::Rails::World.use_transactional_fixtures = true
# How to clean your database when transactions are turned off. See
# http://github.com/bmabey/database_cleaner for more info.
if defined?(ActiveRecord::Base)
  begin
    require 'database_cleaner'
    DatabaseCleaner.strategy = :truncation
  rescue LoadError => ignore_if_database_cleaner_not_present
  end

# Populate the fixtures to the Cuke Test DB before the scenarios...


	# CUCUMBER setup for cuke fixtures
	# Sets up the Rails environment for Cucumber
	ENV["RAILS_ENV"] = "test"
	require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')
	require 'cucumber/rails/world'
	Cucumber::Rails::World.use_transactional_fixtures

	#Seed the DB
	# Fixtures.reset_cache  
	# 	fixtures_folder = File.join(RAILS_ROOT, 'features', 'fixtures')
	# 	fixtures = Dir[File.join(fixtures_folder, '*.yml')].map {|f| File.basename(f, '.yml') }
	# 	Fixtures.create_fixtures(fixtures_folder, fixtures)

	#load the seed data...
	#require 'db/seeds.rb'
	# require 'features/support/listing_seeds.rb'
	# this works (sort of)
	# Before do
	# 	  require 'factory_girl_rails'
	# 	  Dir.glob(File.join(File.dirname(__FILE__), '../../features/support/listing_seeds.rb')).each {|f| require f }
	# 	  Factory.factories.keys.each {|factory| Factory(factory) }
	# 	end
	
	# from http://www.andhapp.com/blog/2009/11/07/using-factory_girl-with-cucumber/
	# load this before each scenario...? Maybe just tag the ones who need this instead?
	# seed the DB. Make this tied to tags, so you don't have to do this each time?
	# this doesn't seem to happen for ALL modes. 
	Before do
		# I've decided to put these in the features/support/listing_seeds.rb instead. Those are automatically loaded.
		
	  	#require 'factory_girl_rails' #not necessary because of gem.
	  	# Dir.glob(File.join(File.dirname(__FILE__), '../../spec/factories/*.rb')).each {|f| require f }
		# either load the seed file, or just place the content in the features/support folder because those get loaded automatically 
		#Dir.glob(File.join(File.dirname(__FILE__), '../../db/seeds.rb')).each {|f| require f }
		# not sure if this is loading the seed data or not?
	end
	
	
	# FIXME Test this some more...
	# DELETE image listing folders after running the tests tagged with paperclip
	AfterStep('@paperclip') do
	  # This will only run before steps within scenarios tagged
	  # with @cucumis AND @sativus.
		# delete folders that were created with paperclip during the test
		require 'fileutils' # don't think this line is necessary...
		#@listing.id = 55
		#dir = Rails.root + '/system/photos/' + @listing.id.to_s()
		dir = Rails.root + '/system/photos/55' # NOT WORKING
		FileUtils.rm_rf(dir)
	end



end
